# ReactJS study notes
## by j-sparrow, 2018-02-07

## What is ReactJS
ReactJS is a JavaScript library, for building user interfaces.

# ReactJS features
## Stateful Components
  Encapsulated js, html, css as packages as components that can manage
their own state, and components are composable to make complex UIs.
  App States and logic are handled by components, so no logic / state are
injected to DOM nor HTML template.
## Declarative Views
  Create Views for each state in the application, Views are composed by
Components.
  React will update and render just the right View when the state of the
Application changes.
## React Component object can be inherited(extended) by third-party
Components/Libraries so as to enchance them.
## React Elements
  In fact, what the render() method returns is a React Element, which is a
lightweight description of what to render to the screen.
  React uses a special syntax called JSX to write(describe) a React
Element.

# How ReactJS works
  1 Components implement a render() method that takes input data(as
component properties: this.props) and returns a description of what to
display.
  2 Components maintain internal data as its state(with this.state)
property. State changes will be reflected to what to display.
  3 Besides this.props and this.state, you're free to add additionaly
properties to this. Only thoes data that will be reflected on UI needs
to go to this.state.
  4 this.props is something passed from parent to children React Elements,
and prosessed by children.
  5 this.state is something owned by a Component itself.
  6 A component's own state usually comes from upper-stream via as
this.props(in the form of <MyElement myProp={myJSXExpression}/>)


# JSX
  JSX tackles the pain that, the UI rendering is inherently coupled with
other logics(UI logic or business logic).
  This is how JSX does its job:
  It is essentially JavaScript(a syntax extension to JavaScript), it's like
an HTML template but it comes with nearly full power of JavaScript. It's
purpose is to produce React Elements in a declarative way.

# React Elements
  React Elements correspond to HTML DOM, but they're different in that React
Elements are plain JavaScript objects, it can be manipulated as JavaScript
objects.
  And React DOM takes care of HTML DOM to match the states of React
Elements.
  What we can do with React Elements?
## Rendering an React Element into the HTML DOM(this process is taken care
by React DOM).
## Updating a rendered React Element --> note that React Elements are
  immutable.
## React Only Updates What's Necessary(the necessary part)

# React Components
  Essentially, React Components are JavaScript functions, that accept
arbitrary inputs(called "props") and return React Elements as a description
of the View. Additionally, React Components are pure JavaScript functions,
that they do not change states --> but only producing new states.
  What we can do with React Components?
## Rendering a Component
## Composing Components

# State and Lifecycle
## Using State Correctly
1 Use this.steState instead of assigining value to this.state directly.
2 State updates may be asynchronous(and this.props too).
  React may batch multiple setState() calls into a single update for
performance. this.props and this.state may be updated asynchronously,
you should not rely on their values for calculating the next state(
remember? each state of the application is like a frame of a movie)
  To fix this problem, use a second form of setState that accepts a
function rather than an objet. That function will receive the previous
state as the first argument, and the props at the time the update is
applied as the second argument:
  this.setState((prevState, props) => {
    counter: prevState.counter + props.increment
  })
3 State updates are merged
  When you call setState(), React merges the object you provide into the
the current state(this.state), and the merging is shallow.

## componentDidMount: after the component output has been rendered to the
DOM.
## componentWillUnmount:

# Events Handling







