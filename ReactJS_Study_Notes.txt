# ReactJS study notes
## by j-sparrow, 2018-02-07

## What is ReactJS
ReactJS is a JavaScript library, for building user interfaces.

## ReactJS features
### Stateful Components
  Encapsulated js, html, css as packages that manage their own state, and
composable to make complex UIs.
  States and logic is written within JS, so no logic / state are injected
to DOM nor HTML template.
  This is how ReactJS achieves that:
  1 Components implement a render() method that takes input data and returns
a description(declarative) of what to display.
  2 Components maintain internal data via this.state property. State
changes(via this.setState() method) will be reflected to what to display.
### Declarative Views
  Create Views for each state in the application, Views are composed by
Components.
  React will update and render just the right View when the state of the
Application changes.
### React Component object can be inherited(extended) by third-party
Components/Libraries so as to enchance them.
### A React Element
  In fact, what the render() method returns is a React Element, which is a
lightweight description of what to render to the screen.
  React uses a special syntax called JSX to write(describe) a React
Element.

# Data flow among Components and React Elements
## this.props is something passed from parent to children, and processed
by children.
## this.state is something owned by a Component itself.
## A component's own state usually comes from upper-stream via as
this.props(in the form of <MyElement myProp={myJSXExpression}/>)
## Define a property within a React Element:
  <MyElement myProp='someValue' />
  Then within the render() method, this property can be accessed via:
  render() {
    this.props.myProp
  }
  // someValue can be a constitution(JSX expression: {})




